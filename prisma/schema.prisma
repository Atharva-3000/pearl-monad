// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id // <-- Added: stores the wallet details JSON
  privateKey       String
  email            String?
  chats            Chat[]
  createdAt        DateTime           @default(now())
  DailyPromptUsage DailyPromptUsage[]
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  content   String
  sender    String // "user" or "assistant"
  timestamp DateTime @default(now())

  @@index([chatId])
}

// Add these new models for rate limiting
model FaucetRequest {
  id            String   @id @default(cuid())
  walletAddress String // The wallet address that requested funds
  timestamp     DateTime @default(now())

  @@index([walletAddress])
}

model DailyPromptUsage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      String // Stored as YYYY-MM-DD
  count     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([userId, date]) // Ensure only one record per user per day
  @@index([userId, date])
}
